'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _Loading = require('./Loading');

var _Loading2 = _interopRequireDefault(_Loading);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ViewerCavans = function (_React$Component) {
    (0, _inherits3.default)(ViewerCavans, _React$Component);

    function ViewerCavans() {
        (0, _classCallCheck3.default)(this, ViewerCavans);

        var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this));

        _this.state = {
            isMouseDown: false,
            mouseX: 0,
            mouseY: 0
        };
        _this.handleMouseScroll = _this.handleMouseScroll.bind(_this);
        _this.handleMouseDown = _this.handleMouseDown.bind(_this);
        _this.bindEvent = _this.bindEvent.bind(_this);
        _this.handleMouseMove = _this.handleMouseMove.bind(_this);
        _this.handleMouseUp = _this.handleMouseUp.bind(_this);
        _this.handleResize = _this.handleResize.bind(_this);
        return _this;
    }

    ViewerCavans.prototype.componentDidMount = function componentDidMount() {
        this.bindEvent();
    };

    ViewerCavans.prototype.handleResize = function handleResize(e) {
        this.props.onResize();
    };

    ViewerCavans.prototype.handleMouseDown = function handleMouseDown(e) {
        if (!this.props.visible) {
            return;
        }
        e.preventDefault();
        e.stopPropagation();
        this.setState({
            isMouseDown: true,
            mouseX: e.nativeEvent.pageX,
            mouseY: e.nativeEvent.pageY
        });
    };

    ViewerCavans.prototype.handleMouseMove = function handleMouseMove(e) {
        if (this.state.isMouseDown) {
            var diffX = e.x - this.state.mouseX;
            var diffY = e.y - this.state.mouseY;
            this.setState({
                mouseX: e.x,
                mouseY: e.y
            });
            this.props.onChangeImgState(this.props.width, this.props.height, this.props.top + diffY, this.props.left + diffX);
        }
    };

    ViewerCavans.prototype.handleMouseUp = function handleMouseUp(e) {
        this.setState({
            isMouseDown: false
        });
    };

    ViewerCavans.prototype.handleMouseScroll = function handleMouseScroll(e) {
        var direct = 0;
        if (e.wheelDelta) {
            direct = e.wheelDelta > 0 ? 1 : -1;
        } else if (e.detail) {
            direct = e.detail > 0 ? 1 : -1;
        }
        if (direct !== 0) {
            var pageX = e.pageX;
            var pageY = e.pageY;
            this.props.onZoom(pageX, pageY, direct, .05);
        }
    };

    ViewerCavans.prototype.bindEvent = function bindEvent(remove) {
        var funcName = 'addEventListener';
        if (remove) {
            funcName = 'removeEventListener';
        }
        document[funcName]('mousewheel', this.handleMouseScroll, false);
        document[funcName]('click', this.handleMouseUp, false);
        document[funcName]('mousemove', this.handleMouseMove, false);
        window[funcName]('resize', this.handleResize, false);
    };

    ViewerCavans.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (!this.props.visible && nextProps.visible) {
            this.bindEvent();
        }
        if (this.props.visible && !nextProps.visible) {
            this.bindEvent(true);
        }
    };

    ViewerCavans.prototype.render = function render() {
        var imgStyle = {
            width: this.props.width + 'px',
            marginTop: this.props.top + 'px',
            marginLeft: this.props.left ? this.props.left + 'px' : 'auto',
            transform: 'rotate(' + this.props.rotate + 'deg) scaleX(' + this.props.scaleX + ') scaleY(' + this.props.scaleY + ')'
        };
        var imgClass = '';
        if (!this.state.isMouseDown) {
            imgClass = this.props.prefixCls + '-image-transition';
        }
        var style = {
            zIndex: this.props.zIndex
        };
        var imgNode = null;
        if (this.props.imgSrc !== '') {
            imgNode = React.createElement('img', { className: imgClass, src: this.props.imgSrc, style: imgStyle, onMouseDown: this.handleMouseDown });
        }
        if (this.props.loading) {
            imgNode = React.createElement(_Loading2.default, { style: {
                    marginTop: this.props.top,
                    marginLeft: this.props.left
                } });
        }
        return React.createElement(
            'div',
            { className: this.props.prefixCls + '-cavans', onMouseDown: this.handleMouseDown, style: style },
            imgNode
        );
    };

    return ViewerCavans;
}(React.Component);

exports.default = ViewerCavans;
module.exports = exports['default'];